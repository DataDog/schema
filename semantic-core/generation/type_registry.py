#!/usr/bin/env python


import textwrap
from typing import Dict

from pydantic import Field
from typing_extensions import Annotated

# Type Registry

# This file contains the semantic types of the Semantic Core.
# These are the types that are available for use in Pydantic classes.


NonEmptyString = Annotated[str, Field(min_length=1, description="A non-empty string")]

PositiveFloat = Annotated[float, Field(gt=0, description="A positive float")]

TraceId = Annotated[
    int,
    Field(
        description="""
        An identifier of a trace, generated by the tracer library. The value of this field is a 64-bit integer, and uniquely identifies the trace within an org.""",
        examples=[0, 12345, 543210, 9999999],
        json_schema_extra={"is_sensitive": False},
    ),
]

SpanId = Annotated[
    int,
    Field(
        description="""
        Span identifier, generated by the tracer library. The value of this field is a 64-bit integer, and uniquely identifies the span within the trace.""",
        examples=[0, 12345, 543210, 9999999],
        json_schema_extra={"is_sensitive": False},
    ),
]

Tags = Annotated[
    Dict,
    Field(
        description="""
        This field represents an arbitrary map of key-value pairs.""",
        examples=[{"foo": "bar", "key": "value"}],
        json_schema_extra={"is_sensitive": False},
    ),
]

TraceState = Annotated[
    str,
    Field(
        description="""
        Additional vendor-specific trace identification information across different distributed tracing systems. The tracestate field may contain any opaque value in any of the keys. See https://www.w3.org/TR/trace-context/#tracestate-header.""",
        examples=["rojo=00f067aa0ba902b7", "rojo=00f067aa0ba902b7,congo=t61rcWkgMzE"],
        json_schema_extra={"is_sensitive": False},
    ),
]

TraceFlags = Annotated[
    int,
    Field(
        description="""
        An 32-bit integer that controls tracing flags such as sampling, trace level, etc. These flags are recommendations given by the caller rather than strict rules to follow. Flags may include zero as valid value. The 31th bit must thus be set to distinguish unset vs zero value.""",
        ge=0,
        le=0xFFFFFFFF,
        examples=[0, 4, 128, 4294967296],
        json_schema_extra={"is_sensitive": False},
    ),
]

Hostname = Annotated[
    str,
    Field(
        description="""
        A hostname is a label that is assigned to a device connected to a computer network and that is used to identify the device in various forms of electronic communication, such as the World Wide Web.
        An empty hostname is a valid value and it signals that Datadog has been able to explicitly collect that no hostname was available when the client side data was produced. This is different from a hostname not being available in a given payload, which signals that there may or may not have been a hostname available, but that data was simply not collected.""",
        examples=["my-hostname"],
        min_length=0,
        json_schema_extra={"is_sensitive": False},
    ),
]

HttpStatusCode = Annotated[
    str,
    Field(
        description="""
        The HTTP response status code.""",
        examples=["200", "404", "500"],
        pattern=r"^[12345]\d\d$",
        json_schema_extra={"is_sensitive": False},
    ),
]

HttpUrl = Annotated[
    str,
    Field(
        description="""
        The URL on an HTTP request, including the obfuscated query string.""",
        examples=["https://example.com:443/search?q=datadog"],
        min_length=1,
        json_schema_extra={"is_sensitive": True},
    ),
]

HttpMethod = Annotated[
    str,
    Field(
        description="""
        The HTTP method used for the connection. Required for both client and server spans.""",
        examples=["GET", "POST", "PUT", "DELETE", "PATCH"],
        pattern=r"^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH)$",
        json_schema_extra={"is_sensitive": False},
    ),
]

HttpVersion = Annotated[
    str,
    Field(
        description="""
        The version of HTTP used for the request.""",
        examples=["1.0", "1.1", "2.0"],
        pattern=r"^1\.[01]$|^2\.0$",
        json_schema_extra={"is_sensitive": False},
    ),
]

HttpRoute = Annotated[
    str,
    Field(
        description="""
        The matched route (path template) of an HTTP request.""",
        examples=["/users/:userID"],
        min_length=1,
        json_schema_extra={"is_sensitive": False},
    ),
]

HttpUserAgent = Annotated[
    str,
    Field(
        description="""
        The user agent header received with the request.""",
        examples=["Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"],
        min_length=1,
        json_schema_extra={"is_sensitive": True},
    ),
]

HttpContentLength = Annotated[
    int,
    Field(
        description="""
        The size of the request or response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the Content-Length header.
        For requests using transport encoding, this should be compressed size.""",
        examples=[1234],
        gt=0,
        json_schema_extra={"is_sensitive": True},
    ),
]

IpAddress = Annotated[
    str,
    Field(
        description=textwrap.dedent(
            """
            An IP address is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication.
            We support both IPv4 and IPv6 addresses."""
        ),
        examples=["192.168.123.132"],
        pattern=r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}|(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$",
        json_schema_extra={"is_sensitive": True},
    ),
]

DbSystem = Annotated[
    str,
    Field(
        description="""An identifier for the database management system (DBMS) product being used.""",
        examples=["mysql", "postgresql"],
        pattern=r"^(adabas|buntdb|cache|cassandra|cloudscape|cockroachdb|coldfusion|consul|cosmosdb|couchbase|couchdb|db2|derby|dynamodb|edb|elasticsearch|eloquent|filemaker|firebird|firstsql|geode|h2|hanadb|hbase|hive|hsqldb|informix|ingres|instantdb|interbase|leveldb|mariadb|maxdb|memcached|mongodb|mssql|mysql|neo4j|netezza|opensearch|oracle|other_sql|pervasive|pointbase|postgresql|presto|progress|redis|redshift|snowflake|sqlite|sybase|teradata|vertica)$",
        json_schema_extra={"is_sensitive": False},
    ),
]

DbConnectionString = Annotated[
    str,
    Field(
        description="The connection string used to connect to the database.",
        examples=["Server=(localdb)\v11.0;Integrated Security=true;", "postgresql://localhost:5432"],
        json_schema_extra={"is_sensitive": True},
    ),
]

DbUser = Annotated[
    str,
    Field(
        description="Username for accessing the database.",
        examples=["widget_user"],
        json_schema_extra={"is_sensitive": False},
    ),
]

DbName = Annotated[
    str,
    Field(
        description="The name of the database being connected to.",
        examples=["customers"],
        json_schema_extra={"is_sensitive": False},
    ),
]

DbStatement = Annotated[
    str,
    Field(
        description="The database statement being executed.",
        examples=["""SELECT * FROM wuser_table', 'SET mykey "WuValue"""],
        json_schema_extra={"is_sensitive": True},
    ),
]

DbOperation = Annotated[
    str,
    Field(
        description="The name of the operation being executed, e.g. the MongoDB command name such as findAndModify, or the SQL keyword.",
        examples=["findAndModify", "HMSET", "SELECT"],
        json_schema_extra={"is_sensitive": False},
    ),
]

DbSqlTable = Annotated[
    str,
    Field(
        description="The name of the primary table that the operation is acting upon, including the database name (if applicable).",
        examples=["customers"],
        json_schema_extra={"is_sensitive": False},
    ),
]

DbRowCount = Annotated[
    int,
    Field(
        description=textwrap.dedent(
            """
                                    The number of rows/results from the query or operation. For caches and other datastores, i.e. Redis, this tag should only set for operations that retrieve stored data,
                                    such as GET operations and queries, excluding SET and other commands not returning data. """
        ),
        examples=["customers"],
        ge=0,
        json_schema_extra={"is_sensitive": False},
    ),
]
